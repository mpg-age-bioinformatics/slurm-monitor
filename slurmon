#!/usr/bin/env python

import os
import sys
import copy
import subprocess32 as subprocess
import threading
import shutil
import csv
import time
import datetime
import mimetypes
import SimpleHTTPServer
import BaseHTTPServer
import urlparse
#import SocketServer
import matplotlib
matplotlib.use('agg')
matplotlib.rcParams['font.size'] = 19
import matplotlib.pyplot as pp
from matplotlib import dates
import argparse

global tstart
global nodes

### output from subprocess
# function 'check_output' redefined to enable the returning of output
def subprocess_check_output(*popenargs, **kwargs):
    timeout = kwargs.pop('timeout', None)
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
    try:
        output, unused_err = process.communicate(timeout=timeout)
    except subprocess.TimeoutExpired:
        process.kill()
        output, unused_err = process.communicate()
    #raise TimeoutExpired(process.args, timeout, output=output)
    retcode = process.poll()
    if retcode:
        raise subprocess.CalledProcessError(retcode, process.args, output=output)
    return output

### html update
def html_update():
  # requires global nodes and tstart variables!
  html = """
<!doctype html>
<meta http-equiv="refresh" content="%(iter)s" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<!meta http-equiv="Location" content="/" />
<meta name="author" content="Sven E. Templer" />
<head>
  <title>slurm monitor</title>
  <link rel="shortcut icon" type="image/png" href="/favicon.png"/>
  <style>
    html { box-sizing: border-box; }
    *,::before,::after { box-sizing: inherit; }
    body { width: 96%%; font-family: sans-serif; color: #333333; margin: 15px; vertical-align: middle; }
    header,nav,main { border-radius: 0.5em 0.5em 0.5em; border: 1px solid; margin: 5px; padding: 5px;
      text-align: center; }
    header { height: 90px; }
    header img { height: 80px; width: 80px; float: right;
      border:0px solid; -webkit-border-radius: 20px; -moz-border-radius: 20px; border-radius: 20px; }
    main img { height: 160px; width: 300px; margin: 5px; }
    nav { float: left; width: 200px; background: #fffbf0; border-color: #e7c157; margin-top: 0px; }
    nav li { list-style: circle; margin: 5px; text-align: left; }
    main { display: block; background: #c4ced3; border-color: #8a9da8; margin-left: 210px; margin-top: 5px; }
    table { width: 100%%; font-family: "Courier", Courier, monospace; }
    tr { text-align: left; } 
  </style>
</head>
<body>
<header>
  <img src="avatar.png">
  <h1>slurm monitor</h1>
</header>
<nav>
  <h2>Monitoring</h2>
  <ul>
  <li>Stats:</br>3|1 sec|counts</li>
  <li>Cycle:</br>30 sec</li>
  <li>Started:</br>%(zero)s</li>
  <li>Refreshed:</br>%(current)s</br>(%(iter)s sec auto)</li>
  <li>Slurm queue:</br>%(queue)s (run/pend)</li>
  </ul>
  <h2>Values</h2>
  <ul>
  <li><font color="#0080FF">CPU</font></li>
  <li><font color="#FFBF00">RAM</font></li>
  <li><font color="#DF0101">Swap</font></li>
  </ul>
</nav>
<main>
  <h2>Load</h2>
  <p>%(load)s</p>
  <p>%(imgs)s</p>
</main>
</body>
</html>"""
  f = open('index.html', 'w')
  queue = get_slurmqueue()
  load = get_slurmload()
  tnow = time.strftime('%Y-%m-%d %H:%M:%S')
  imgs = [ '<img src="' + node + '.svg" alt="' + node + '">' for node in nodes ]
  imgs = '\n'.join(imgs)
  f.write(html % { 'iter' : 60, 'zero' : tstart, 
    'current' : tnow, 'queue' : queue, 'load' : load, 'imgs' : imgs })
  f.close()

### http handler with custom index.html
# extended default do_GET from SimpleHTTPRequestHandler
# to create 'index.html' file with custom variable values inserted:
def handler_get_method(self):
  g_plotrange = urlparse.parse_qs(
      urlparse.urlparse(self.path).query).get('r', 60)
  html_update()
  f = self.send_head()
  if f:
    try:
      self.copyfile(f, self.wfile)
    finally:
      f.close()

### get http handler
def handler():
  h = SimpleHTTPServer.SimpleHTTPRequestHandler
  h.do_GET = handler_get_method
  h.extensions_map['.svg']='image/svg+xml'
  return h

### get slurm queue
def get_slurmqueue ():
  cmd = [ 'squeue', '-o', '%T' ]
  try:
    jobs = subprocess.check_output(cmd, stderr = subprocess.STDOUT, timeout = 3)
  except:
    jobs = ['STATE\n']
    pass
  jobs = jobs.split('\n')
  npend = len([i for i in jobs if i == "PENDING"])
  nrun  = len([i for i in jobs if i == "RUNNING"])
  return str(nrun) + '/' + str(npend)

def get_slurmload ():
  try:
    load1 = subprocess.Popen(['sinfo', '-o', '%20n %10P %10T %15C %.7m'], stdout = subprocess.PIPE)
    #load2 = subprocess.Popen(['tail', '-n', '+2'], stdin = load1.stdout, stdout = subprocess.PIPE)
    load3 = subprocess.Popen(['awk', '{split($4,a,"/"); $4=a[1]"/"a[4]; if ($5 ~ /^[0-9]+/ ) {$5=int($5/1024)"GB"}; print }'], stdin = load1.stdout, stdout = subprocess.PIPE)
    load4 = subprocess.Popen(['sort'], stdin = load3.stdout, stdout = subprocess.PIPE)
    load, err = load4.communicate()
  except:
    load = [ 'NA' ]
    pass
  load = load.split('\n')
  load = [ i.split(' ') for i in load if len(i) > 0 ]
  loadstring = '<table style>\n'
  for i in load:
    loadstring += '<tr>\n<td>'
    loadstring += '</td>\n<td>'.join(i)
    loadstring += '</td>\n</tr>\n'
  loadstring += '</table>'
  return loadstring

### daemon stats
def rund_stats(home, nodes, sleep, user):
  script = """
cd %(home)s
while true
do
  line="$(date +%%Y-%%m-%%d_%%H:%%M:%%S) "
  line+="$(mpstat %(interval)s 1 | awk '$2=="all" && $1!="Average:" {print $3}') "
  line+="$(free | awk '/^Mem/{ mem=$3/$2*100 } /^Swap/{ swp=$3/$2*100 } END { print mem " " swp }')"
  echo "$line" >> %(node)s.stat
  sed -i -e :a -e '$q;N;%(length)s,$D;ba' %(node)s.stat
  sleep %(sleep)s
done""" 
  for node in nodes:
    f = open(home + node + '.sh', 'w')
    f.write(script % { 'home' : home, 'interval' : args.interval, 'node' : node, 'sleep' : args.sleep, 'length' : args.length })
    f.close()
    cmd = 'ssh ' + user + '@' + node + ' bash ' + home + node + '.sh'
    proc = subprocess.Popen(cmd, shell = True)

### generate plot
def plot_load(home, node):
  d = csv.reader(open(home + node + '.stat'), delimiter = ' ')
  dt = [] # time
  dc = [] # cpu load
  dm = [] # mem load
  ds = [] # swap load
  for row in d:
    dt.append(datetime.datetime.strptime(row[0], '%Y-%m-%d_%H:%M:%S'))
    dc.append(float(row[1]))
    dm.append(float(row[2]))
    ds.append(float(row[3]))
  #i0 = len
  dx = range(len(dt))
  fig, ax = pp.subplots(1)
  fig.set_size_inches(12, 6) # x=4.8 y=1.6
  ax.set_ylim(0, 100)
  ax.set_title(node)
  ax.set_ylabel('[%]')
  ax.set_xlabel('Time')
  ax.fill_between(dt, float(0), dc, facecolor='blue', alpha='.6')
  ax.plot(dt,dm,color='orange', lw = 5)
  ax.plot(dt,ds,color='red', lw = 3)
  fig.autofmt_xdate(rotation=25)
  ax.xaxis.set_major_formatter(dates.DateFormatter('%H:%M:%S'))
  fig.savefig(node + '.svg', format='svg') # dpi = 300
  pp.close()

### daemon plots
def rund_plots(home, nodes, sleep):
  while 1:
    for node in nodes:
      if not os.path.isfile(home + node + '.stat'):
        continue
      time.sleep(.5)
      plot_load(home, node)
    time.sleep(sleep)

### check tmp dir tree
def create_home(home):
  pwd = os.getcwd()
  try:
    shutil.rmtree(home)
  except:
    print('warning: could not remove server directory ' + home)
  try:
    os.makedirs(home)
  except:
    print('error: could not create working directory ' + home)
    quit()
  shutil.copy(pwd + '/favicon.png', home) 
  shutil.copy(pwd + '/avatar.png', home) 
  try:
    os.chdir(home)
    print('changed to working directory ' + home)
  except:
    print('error: could not change to working directory ' + home)
    quit()
 
### run
if __name__ == '__main__':
  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument('-n', '--nodes', help='host names to query', default = 'cluster,bioinf-blc-12,bioinf-blc-14,bioinf-blc-16')
  parser.add_argument('-s', '--sleep', help='sleep time between queries', default = 60)
  parser.add_argument('-i', '--interval', help='stats query interval', default = 3)
  parser.add_argument('-l', '--length', help='number of timepoints/queries to plot', default = 30)
  parser.add_argument('-p', '--port', help='http server port', default = 8910)
  parser.add_argument('-d', '--home-directory', help='shared directory', dest = 'home', default = '~/.slurmon')
  parser.add_argument('-u', '--user', help='ssh user, default is current')
  args = parser.parse_args()
  pid = os.getpid()
  args.home += '/' + str(pid) + '/' 
  args.home = os.path.expanduser(args.home)
  nodes = args.nodes.split(',')
  host = os.uname()[1]
  if args.user is None:
    args.user = os.getenv('USER')
  handler = handler()
  subprocess.check_output = subprocess_check_output
  print('creating home ...')
  create_home(args.home)
  print('collecting stats ...')
  daemon_stats = threading.Thread(target = rund_stats, args = [args.home, nodes, args.sleep, args.user])
  daemon_stats.daemon = True
  daemon_stats.start()
  daemon_plots = threading.Thread(target = rund_plots, args = [args.home, nodes, args.sleep])
  daemon_plots.daemon = True
  daemon_plots.start()
  httpd = BaseHTTPServer.HTTPServer((host, args.port), handler)
  tstart = time.strftime('%Y-%m-%d %H:%M:%S')
  print('starting webserver at %s:%s at ' % (host, args.port) + tstart) #ime.asctime()
  try:
    httpd.serve_forever()
  except KeyboardInterrupt:
    pass
  httpd.server_close()
  print "stopped webserver %s:%s" % (host, args.port), 'at', time.asctime()
  try:
    shutil.rmtree(args.home)
  except:
    print('warning: could not remove server directory ' + args.home)
  try:
    os.remove('index.html')
  except:
    print('warning: could not remove index.html')
    quit()

### EOF
