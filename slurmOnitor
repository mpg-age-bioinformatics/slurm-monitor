#!/usr/bin/env python


import os
import sys
import copy
import subprocess32 as subprocess
import threading
import shutil
import csv
import time
import datetime
import mimetypes
import SimpleHTTPServer
import BaseHTTPServer
#import SocketServer
import matplotlib
matplotlib.use('agg')
matplotlib.rcParams['font.size'] = 19
import matplotlib.pyplot as pp
from matplotlib import dates

# html template
html = """
<!doctype html>
<meta http-equiv="refresh" content="%(iter)s" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<!meta http-equiv="Location" content="/" />
<meta name="author" content="Sven E. Templer" />
<head>
  <title>slurmOnitor</title>
  <link rel="shortcut icon" type="image/png" href="/slurmOnitor-favicon.png"/>
  <style>
    html { box-sizing: border-box; }
    *,::before,::after { box-sizing: inherit; }
    body { width: 96%%; font-family: sans-serif; color: #333333; margin: 15px; vertical-align: middle; }
    header,nav,main { border-radius: 0.5em 0.5em 0.5em; border: 1px solid; margin: 5px; padding: 5px; }
    header { height: 90px; }
    header img { height: 80px; width: 80px; float: right;
      border:0px solid; -webkit-border-radius: 20px; -moz-border-radius: 20px; border-radius: 20px; }
    main img { height: 160px; width: 300px; margin: 5px; }
    nav { float: left; width: 200px; background: #fffbf0; border-color: #e7c157; margin-top: 0px; }
    nav li { list-style: circle; margin: 5px; }
    main { display: block; background: #c4ced3; border-color: #8a9da8; margin-left: 210px; margin-top: 5px; }
  </style>
</head>

<body>

<header>
  <img src="slurmOnitor-avatar.png">
  <h1>slurmOnitor 
  </h1>
</header>

<nav>
  <h2>Monitoring</h2>
  <ul>
  <li>Stats:</br>3|1 sec|counts</li>
  <li>Cycle:</br>30 sec</li>
  <li>Started:</br>%(zero)s</li>
  <li>Refreshed:</br>%(current)s</br>(%(iter)s sec auto)</li>
  <li>Slurm queue:</br>%(queue)s (run/pend)</li>
  </ul>
  <h2>Values</h2>
  <ul>
  <li><font color="#0080FF">CPU</font></li>
  <li><font color="#FFBF00">RAM</font></li>
  <li><font color="#DF0101">Swap</font></li>
  </ul>
</nav>

<main>
  <h2>Load</h2>
  <img src="bioinf-node01.svg" alt="bioinf-node01">
  <img src="bioinf-node02.svg" alt="bioinf-node02">
  <img src="bioinf-node03.svg" alt="bioinf-node03">
  <img src="bioinf-node04.svg" alt="bioinf-node04">
  <img src="bioinf-node05.svg" alt="bioinf-node05">
  <img src="bioinf-node06.svg" alt="bioinf-node06">
  <img src="bioinf-node07.svg" alt="bioinf-node07">
  <img src="bioinf-node08.svg" alt="bioinf-node08">
  <img src="bioinf-node09.svg" alt="bioinf-node09">
  <img src="bioinf-node10.svg" alt="bioinf-node10">
  <img src="bioinf-node11.svg" alt="bioinf-node11">
  <img src="bioinf-node12.svg" alt="bioinf-node12">
  <img src="bioinf-node13.svg" alt="bioinf-node13">
  <img src="bioinf-node14.svg" alt="bioinf-node14">
  <img src="bioinf-node15.svg" alt="bioinf-node15">
  <img src="bioinf-node16.svg" alt="bioinf-node16">
</main>

</body>
</html>
"""

bash = """#!/bin/bash
d=$(date +%Y-%m-%d_%H:%M:%S)
c=$(mpstat 3 1 | grep all | grep -v Average | awk '{print $3}')
m=$(free | grep Mem | awk \'{print $3/$2*100}\')
s=$(free | grep Swap | awk \'{print $3/$2*100}\')
#echo "$d $c $m $s"
echo "$c $m $s"
"""


def subprocess_check_output(*popenargs, **kwargs):
    timeout = kwargs.pop('timeout', None)
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
    try:
        output, unused_err = process.communicate(timeout=timeout)
    except subprocess.TimeoutExpired:
        process.kill()
        output, unused_err = process.communicate()
    #raise TimeoutExpired(process.args, timeout, output=output)
    retcode = process.poll()
    if retcode:
        raise subprocess.CalledProcessError(retcode, process.args, output=output)
    return output

subprocess.check_output = subprocess_check_output

# get cpu load, free mem and swap
#class Timeout(Exception):
#  pass
def get_load(ni, u, slurm):
  cmd = [ 'ssh', u + '@' + ni, 'bash', swd + '/slurmOnitor-stats' ]
  if slurm:
    cmd = [ 'srun', '--nodelist=' + ni, '-p', 'hugemem,himem,blade', '-J', 'slurmOnitor', 'bash', swd + '/slurmOnitor-stats' ]

  #stat = subprocess.Popen(
  #  cmd,
  #  shell = False,
  #  stdout = subprocess.PIPE,
  #  stderr = subprocess.PIPE)
  #line = stat.stdout.readlines()

  try:
    line = subprocess.check_output(
      cmd, 
      stderr = subprocess.STDOUT, 
      timeout = 8)
  except subprocess.CalledProcessError:
    line = '-1 -1 -1 -1'
    pass
  line = time.strftime('%Y-%m-%d_%H:%M:%S ') + line
  #print ni + ': ' + line[:-1]
  print ni + ': ' + line.rstrip("\n")

  f = open(ni, 'a')
  if len(line)>0:
    f.write(line)
    #f.write(str(line[0]))
  f.close()

def get_slurmqueue ():
  cmd = [ 'squeue', '-o', '%T' ]
  try:
    jobs = subprocess.check_output(cmd, stderr = subprocess.STDOUT, timeout = 3)
  except:
    jobs = ['STATE\n']
    pass
  jobs = jobs.split('\n')
  npend = len([i for i in jobs if i == "PENDING"])
  nrun  = len([i for i in jobs if i == "RUNNING"])
  return str(nrun) + '/' + str(npend)



# strip load data file
def get_load_stripped(ni):
  a = [ 'sed', '-i', '-e :a', "-e", '$q;N;50,$D;ba', ni ]
  subprocess.Popen(a)


# function to read values
def get_load_values(f, c):
  d = csv.reader(open(f), delimiter = ' ')
  return [r[c] for r in d]


# function to generate an image
def get_img(ni):
  ft = swd + '/' + ni
  dt = get_load_values(ft, 0)
  dt = [ datetime.datetime.strptime(i, '%Y-%m-%d_%H:%M:%S') for i in dt ]
  dl = get_load_values(ft, 1)
  dl = [float(i) for i in dl]
  dm = get_load_values(ft, 2)
  dm = [float(i) for i in dm]
  ds = get_load_values(ft, 3)
  ds = [float(i) for i in ds]
  dx = range(len(dt))
  fig, ax = pp.subplots(1)
  fig.set_size_inches(12, 6) # x=4.8 y=1.6
  ax.set_ylim(0, 100)
  ax.set_title(ni)
  ax.set_ylabel('[%]')
  ax.set_xlabel('Time')
  ax.fill_between(dt, float(0), dl, facecolor='blue', alpha='.6')
  ax.plot(dt,dm,color='orange', lw = 5)
  ax.plot(dt,ds,color='red', lw = 3)
  fig.autofmt_xdate(rotation=25)
  ax.xaxis.set_major_formatter(dates.DateFormatter('%H:%M:%S'))
  #fig.savefig(ft + '.png', dpi=300, format='png')
  fig.savefig(ft + '.svg', format='svg')
  pp.close()


def get_daemon(n, u, s):
  print('Started collecting data for nodes:')
  for ni in n:
    print('- ' + ni)
  while 1:
    if not os.path.exists(swd):
      print('Stopped collecting data')
      quit()
    for ni in n:
      get_load(ni, u, s)
    for ni in n:
      get_load_stripped(ni)
      time.sleep(.4)
      get_img(ni)
    time.sleep(30)


# function to update the html template
def html_update():
  f = open('index.html', 'w')
  q = get_slurmqueue()
  t = time.strftime('%Y-%m-%d %H:%M:%S')
  f.write(html % { 'iter' : htmli, 'zero' : htmlt0, 'current' : t, 'queue' : q })
  f.close()
  

# extended default do_GET from SimpleHTTPRequestHandler
# to create 'index.html' file with custom variable values inserted:
def handler_do_GET(self):
  html_update()
  f = self.send_head()
  if f:
    try:
      self.copyfile(f, self.wfile)
    finally:
      f.close()


# run
if __name__ == '__main__':

  # load environment variables  
  global pid
  pid = os.getpid()
  global pwd
  pwd = os.path.realpath('.')
  global swd
  swd = os.getenv("HOME")
  swd = swd + '/.slurmOnitor/' + str(pid)
  global htmli
  htmli = 60 
  global htmlt0
  htmlt0 = time.strftime('%Y-%m-%d %H:%M:%S')
  slurm = False
  sshid = 'STempler'
  hostname = "cluster"
  hostport = 8910
  nodes = [ 'bioinf-node' + str(i).zfill(2) for i in range(1,17) ]
  #nodes = [ 'bioinf-node05', 'bioinf-node15' ] ### TESTING
  if slurm:
    nodes = [ 'bioinf-node' + str(i).zfill(2) for i in range(1,17) ] #  if not i in [15]
  
  # define http server
  handler = SimpleHTTPServer.SimpleHTTPRequestHandler
  handler.do_GET = handler_do_GET
  handler.extensions_map['.svg']='image/svg+xml'

  # create selected working directory
  try:
    shutil.rmtree(swd)
  except:
    print('')
  try:
    os.makedirs(swd)
  except:
    print('Error: could not create working directory ' + swd)
    quit()
  shutil.copy(pwd + '/slurmOnitor-favicon.png', swd) 
  shutil.copy(pwd + '/slurmOnitor-avatar.png', swd) 
  try:
    os.chdir(swd)
    print('Changed to working directory ' + swd)
  except:
    print('Error: could not change to working directory ' + swd)
    quit()
  f = open('slurmOnitor-stats', 'w')
  f.write(bash)
  f.close()

  # start httpd daemon
  daemon = threading.Thread(target = get_daemon, args = [nodes, sshid, slurm])
  daemon.start()
  httpd = BaseHTTPServer.HTTPServer((hostname, hostport), handler)
  print "Starting webserver at %s:%s" % (hostname, hostport), 'at', time.asctime()
  try:
    httpd.serve_forever()
  except KeyboardInterrupt:
    pass

  # close server and remove working directory
  httpd.server_close()
  print "Stopped webserver %s:%s" % (hostname, hostport), 'at', time.asctime()
  try:
    shutil.rmtree(swd)
  except:
    print('')
  try:
    os.remove('index.html')
  except:
    print('')

### EOF
